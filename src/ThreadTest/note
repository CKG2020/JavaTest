/**
 * This class provides thread-local variables(变量).  These variables differ from
 * their normal counterparts in that each thread that accesses one (via(通过) its
 * {@code get} or {@code set} method) has its own, independently initialized(初始化)
 * copy of the variable.  {@code ThreadLocal} instances(实例) are typically private
 * static fields in classes that wish to associate state with a thread (e.g.,
 * a user ID or Transaction ID).

  * <p>For example, the class below generates unique identifiers local to each
  * thread.下面的类生成每个线程本地的唯一标识符。
  * thread-local instances are subject to garbage collection (unless other
  * references to these copies exist).
  * 除非存在对这些副本的其他引用，否则线程本地实例将受到垃圾收集的影响。

 */

 学习名词：

 弱引用和强引用 (new对象强引用，点儿属性弱引用)
 Entry---->就是kv类似map的内部类---->内部类有啥作用
 ThreadLocalMap
 java.util.concurrent.atomic.*
 countdownlatch 锁，同步等待  这里面的线程执行完之后才会执行下面的线程，通常countdownlatch(1)
 yeild-----使线程暂停并允许其他线程执行
 死锁-------互相都加了锁，互相调用，结果谁都进行不下去
         //t.setDaemon   线程保护  像保镖一样，同时死
         //t.join  线程同步   放try catch里
         //t.setPriority(10);  排优先级，10是最低   不是说设优先级最高就先跑
 synchronized---------加令牌的两种方式，1 方法上加锁，2 加锁范围
 CLH和MCS
 AQS：AbstractQuenedSynchronizer抽象的队列式同步器。是除了java自带的synchronized关键字之外的锁机制。
 AQS的全称为（AbstractQueuedSynchronizer）
 AQS 定义了两种资源共享方式：
 1.Exclusive：独占，只有一个线程能执行，如ReentrantLock
 2.Share：共享，多个线程可以同时执行，如Semaphore、CountDownLatch、ReadWriteLock，CyclicBarrier
 实现了AQS的锁有：自旋锁、互斥锁、读锁写锁、条件产量、信号量、栅栏都是AQS的衍生物

  CAS（比较并交换）是CPU指令级的操作，只有一步原子操作，所以非常快
  CAS算法，用CPU指令来实现无锁自增

  HashMap的优化   数组-链表-红黑树
  栅栏闭锁

  公平锁  谁等的时间长，谁先获得锁，
  ReentrantLock
  1.tryLock如果获得就执行没有就不执行（当一个任务获得锁的时候，必须等他执行完，其他线程获得了锁才能执行，再此期间没有获得锁的线程将不能执行）
  2.资源同步（一个线程执行完，另一个线程再执行。一个接一个）
  3.设置获得锁的时间（当再规定的时间内没有获得锁则放弃任务）
  4.锁中断（当请求超过规定时间时可以中断锁，并抛异常）


  自旋锁 ，自旋锁的其他种类，阻塞锁，可重入锁 ，读写锁 ，
  互斥锁 ，悲观锁 ，乐观锁 ，公平锁 ，偏向锁， 对象锁，
  线程锁，锁粗化， 锁消除，轻量级锁，重量级锁， 信号量，
  独享锁，共享锁，分段锁

  悲观锁在Java中的使用，就是利用各种锁。乐观锁在Java中的使用，
  是无锁编程，常常采用的是CAS算法，典型的例子就是原子类，
  通过CAS自旋实现原子操作的更新。

  多线程递推RecursiveActionTest
  多线程递归RecursiveTaskTest

  Affinity.setAffinity(7);//第7个cpu
  可以设置在第几个cpu启动
  AffinityLock readerLock = al.acquireLock(DIFFERENT_SOCKET, DIFFERENT_CORE);
  //查看启动的线程
